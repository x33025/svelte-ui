[
  {
    "name": "async-loader",
    "type": "folder",
    "contents": [
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n    export let promise: Promise<any> | null = null;\n    export let loadingText: string = 'Loading...'; // Default loading message\n    export let errorText: string = 'Failed to load data'; // Default error message\n  </script>\n  \n  {#await promise}\n    <div class=\"loading\">{loadingText}</div>\n  {:then result}\n    <slot name=\"success\" {result} />\n  {:catch error}\n    <div class=\"error\">{errorText}: {error.message}</div>\n  {/await}\n  \n  <style>\n    .loading {\n      padding: 0.5em;\n      text-align: center;\n    }\n  \n    .error {\n      padding: 0.5em;\n      background-color: var(--red);\n      border-radius: 0.25em;\n      text-align: center;\n      color: white;\n    }\n  </style>\n  "
      }
    ]
  },
  {
    "name": "calendar",
    "type": "folder",
    "contents": [
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n    import { calendar, DaysOfWeek } from './index.svelte.js';\n\n    let wasDraggingOutside = false;\n    let isDragging = $state(false);\n    let showMonthOverlay = $state(false);\n\n    function toggleMonthOverlay() {\n        showMonthOverlay = !showMonthOverlay;\n    }\n\n    $effect(() => {\n        window.addEventListener('mouseup', handleMouseUp);\n        document.addEventListener('click', handleClickOutside);\n\n        return () => {\n            document.removeEventListener('click', handleClickOutside);\n        };\n    });\n\n    function handleMouseDown(day: Date) {\n        isDragging = true;\n        calendar.rangeStart = day;\n        calendar.rangeEnd = day;\n        calendar.selectedDate = null;\n    }\n\n    function handleMouseEnter(day: Date) {\n        if (isDragging || wasDraggingOutside) {\n            isDragging = true;\n            calendar.rangeEnd = day;\n            wasDraggingOutside = false;  // Reset the flag once re-entered\n        }\n    }\n\n    function handleMouseUp() {\n        isDragging = false;\n        wasDraggingOutside = false;\n    }\n\n    function handleMouseLeave() {\n        if (isDragging) {\n            wasDraggingOutside = true;  // Set the flag when leaving while dragging\n        }\n    }\n\n    function handleDayClick(day: Date) {\n        if (calendar.selectedDate === day) {\n            calendar.selectedDate = null;\n        } else {\n            calendar.selectedDate = day;\n        }\n        calendar.rangeStart = null;\n        calendar.rangeEnd = null;\n    }\n\n    function handleYearInputFocus() {\n        showMonthOverlay = false;\n    }\n\n    function handleClickOutside(event: MouseEvent) {\n        const calendarElement = document.querySelector('.calendar');\n        if (calendarElement && !calendarElement.contains(event.target as Node)) {\n            calendar.selectedDate = null;\n            calendar.rangeStart = null;\n            calendar.rangeEnd = null;\n        }\n    }\n</script>\n\n<div class=\"stack calendar no-gap border-highlight\" >\n    {@render Header()}\n    <div class=\"z-stack\">\n        {@render Month()}\n        {#if showMonthOverlay}\n            <button class=\"overlay-content\" onclick={toggleMonthOverlay}>\n                {@render MonthSelection()}\n            </button>\n        {/if}\n    </div>\n</div>\n\n{#snippet Header()}\n<div class=\"stack full-width calendar-header subheadline\" style=\"--direction: row; --justify: space-around; --align: center;\">\n    <button onclick={calendar.prevMonth} aria-label=\"Previous month\">&lt;</button>\n    <div>\n        <button class=\"header-item\" class:selected={!showMonthOverlay} onclick={toggleMonthOverlay}>\n            {new Date(calendar.selectedYear ?? calendar.today.getFullYear(), calendar.selectedMonth ?? calendar.today.getMonth(), 1).toLocaleString('default', { month: 'long' })}\n        </button>\n        {@render YearInput()}\n    </div>\n    <button onclick={calendar.nextMonth} aria-label=\"Next month\">&gt;</button>\n</div>\n{/snippet}\n\n{#snippet YearInput()}\n<input \n    type=\"number\" \n    value={calendar.selectedYear ?? calendar.today.getFullYear()} \n    oninput={(e) => {\n        calendar.selectedYear = +(e.target as HTMLInputElement).value;\n        calendar.days = calendar.calculateDays();\n    }} \n    onfocus={handleYearInputFocus}\n    class=\"year-input header-item\"\n/>\n{/snippet}\n\n{#snippet MonthSelection()}\n<div class=\"grid month-grid month-selection\">\n    {#each Array.from({ length: 12 }, (_, i) => i) as month}\n        <button \n            class=\"border-highlight\"\n            class:selected={month === (calendar.selectedMonth ?? calendar.today.getMonth())} \n            onclick={() => {\n                calendar.selectedMonth = month;\n                calendar.days = calendar.calculateDays();\n            }}\n        >\n            {new Date(calendar.selectedYear ?? calendar.today.getFullYear(), month, 1).toLocaleString('default', { month: 'long' })}\n        </button>\n    {/each}\n</div>\n{/snippet}\n\n{#snippet Month()}\n<div \n    class=\"stack month\" \n    role=\"grid\" \n    tabindex=\"0\"\n    onmouseleave={handleMouseLeave}\n>\n    <div class=\"stack full-width days-of-week callout\" style=\"--direction: row; --justify: space-between; --align: center;\">\n        {#each Array.from({ length: 7 }, (_, i) => (calendar.startDayOfWeek + i) % 7) as day}\n            <div>{Object.keys(DaysOfWeek)[day].slice(0, 3)}</div>\n        {/each}\n    </div>\n\n    <div class=\"grid day-grid full-width\" style=\"--direction: row; --justify: space-between; --align: center;\">\n        {#each calendar.days as day}\n            {@render Day(day)}\n        {/each}\n    </div>\n</div>\n{/snippet}\n\n{#snippet Day(day: Date)}\n<button \n    class=\"stack day\"\n    style=\"--justify: center; --align: center;\"\n    class:selected={calendar.isSelected(day)}\n    class:inactive={calendar.isInactive(day)}\n    class:today={calendar.isToday(day)}\n    class:in-range={calendar.isInRange(day)}\n    class:range-start={calendar.isRangeStart(day)}\n    class:range-end={calendar.isRangeEnd(day)}\n    \n    onmousedown={() => handleMouseDown(day)}\n    onmouseenter={() => handleMouseEnter(day)}\n    onmouseup={handleMouseUp}\n    onclick={() => handleDayClick(day)} \n    tabindex=\"0\"\n    aria-label={`${day.getDate()} ${day.toLocaleString('default', { month: 'long' })} ${day.getFullYear()}`}\n>\n    {day.getDate()}\n</button>\n{/snippet}\n\n<style>\n    .calendar {\n        background-color: white;\n        border-radius: 1em;\n        color: black;\n        max-width: fit-content;\n    }\n\n\n    .header-item {\n        padding: var(--small-padding);\n        border-radius: 0.35em;\n        transition: background-color 0.3s ease;\n    }\n\n    .header-item:hover {\n        background-color: var(--gray-1);\n        color: black;\n    }\n\n    .year-input {\n        width: 5em;\n    }\n\n    .year-input:hover {\n        background-color: var(--gray-1);\n\n    }\n\n    .year-input:focus {\n        background-color: var(--gray-1);\n        color: black;\n\n    }\n\n    .calendar-header {\n        padding: 0.5em;\n        border-bottom: 1px solid var(--gray-2);\n    }\n\n    .days-of-week {\n\n        grid-template-columns: repeat(7, 1fr);\n        text-align: center;\n        opacity: 0.8;\n    }\n\n    .day-grid {\n        gap: 0.5em;\n        grid-template-columns: repeat(7, 1fr);\n        text-align: center;\n    }\n\n\n\n    .month {\n        padding: 1em;\n    }\n\n    .inactive {\n        opacity: 0.5;\n    }\n\n    .month-grid {\n        grid-template-columns: repeat(3, 1fr);\n        gap: 0.5em;\n    }\n\n    .month-selection button {\n        padding: var(--default-padding);\n        border-radius: 0.5em;\n\n    }\n\n    .month-selection button:hover {\n        background-color: var(--gray-1);\n       \n    }\n\n    .overlay-content {\n        background-color: white;\n        padding: 1em;\n        border-radius: 1em;\n        z-index: 101;\n    }\n\n\n    .day {\n        padding: 0.5em 0;\n        border-radius: 50%;\n        cursor: pointer;\n        width: 2em;\n        height: 2em;\n        transition: background-color var(--standard-duration), transform var(--snappy-duration);\n    }\n\n    .day:hover:not(.selected):not(.in-range) {\n        background-color: var(--gray-1);\n        color: black;\n    }\n\n    .day.selected {\n        background-color: var(--blue);\n        color: white;\n        font-weight: bold;\n        transform: scale(1.1);\n        z-index: 2;\n    }\n\n    .day.in-range {\n        background-color: var(--gray-2);\n        color: black;\n    }\n\n    .day.range-start, .day.range-end {\n        transform: scale(1.1);\n        background-color: var(--blue);\n        color: white;\n        font-weight: bold;\n        z-index: 2;\n    }\n\n    .day.today {\n       background-color: var(--red);\n       color: white;\n    }\n</style>"
      },
      {
        "name": "index.svelte.ts",
        "type": "file",
        "fileContent": "export const DaysOfWeek = {\n    Sunday: 0,\n    Monday: 1,\n    Tuesday: 2,\n    Wednesday: 3,\n    Thursday: 4,\n    Friday: 5,\n    Saturday: 6\n} as const;\n\nexport class Calendar {\n\n    today: Date = $state(new Date());\n\n    days: Date[] = $state([]);\n\n    selectedDate: Date | null = $state(null);\n\n    rangeStart: Date | null = $state(null);\n    rangeEnd: Date | null = $state(null);\n\n    selectedMonth: number | null = $state(null);\n    selectedYear: number | null = $state(null);\n   \n    startDayOfWeek: number = DaysOfWeek.Monday;\n\n    showAdjacentMonths: boolean = true;\n\n    constructor() {\n        this.today = new Date();\n        this.days = this.calculateDays();\n        this.selectedDate = this.today;\n        \n        this.selectedMonth = this.today.getMonth();\n        this.selectedYear = this.today.getFullYear();\n        \n        this.rangeStart = null;\n        this.rangeEnd = null;\n\n        this.calculateDays = this.calculateDays.bind(this);\n        this.prevMonth = this.prevMonth.bind(this);\n        this.nextMonth = this.nextMonth.bind(this);\n    }\n\n    calculateDays(): Date[] {\n        const year = this.selectedYear ?? this.today.getFullYear();\n        const month = this.selectedMonth ?? this.today.getMonth();\n        console.log(`Calculating days for Month: ${month}, Year: ${year}`);\n        const firstDayOfMonth = new Date(year, month, 1);\n        const dayOfWeek = (firstDayOfMonth.getDay() - this.startDayOfWeek + 7) % 7;\n        const firstDate = new Date(year, month, 1 - dayOfWeek);\n\n        const daysInMonth = new Date(year, month + 1, 0).getDate();\n        const totalDays = this.showAdjacentMonths ? 42 : daysInMonth;\n\n        return Array.from({ length: totalDays }, (_, i) => this.createDay(firstDate, i))\n            .filter(day => this.showAdjacentMonths || (day.getMonth() === month));\n    }\n\n    createDay(startDate: Date, offset: number): Date {\n        const currentDate = new Date(startDate);\n        currentDate.setDate(startDate.getDate() + offset);\n        return currentDate;\n    }\n\n    isToday(day: Date): boolean {\n        return day.getDate() === this.today.getDate() &&\n               day.getMonth() === this.today.getMonth() &&\n               day.getFullYear() === this.today.getFullYear();\n    }\n\n    isSelected(day: Date): boolean {\n        if (!this.selectedDate) {\n            return false;\n        } else {\n            return day.toDateString() === this.selectedDate.toDateString();\n        }\n    }\n\n    isInactive(day: Date): boolean {\n        const month = this.selectedMonth ?? this.today.getMonth();\n        return day.getMonth() !== month;\n    }\n    isInRange(day: Date): boolean {\n        if (!this.rangeStart || !this.rangeEnd) return false;\n        \n        // Ensure that range works forward and backward\n        const [start, end] = this.rangeStart < this.rangeEnd\n            ? [this.rangeStart, this.rangeEnd]\n            : [this.rangeEnd, this.rangeStart];\n\n        return day >= start && day <= end;\n    }\n\n    isRangeStart(day: Date): boolean {\n        if (this.rangeStart === null) return false;\n        return day.toDateString() === this.rangeStart.toDateString();\n    }\n\n    isRangeEnd(day: Date): boolean {\n        if (this.rangeEnd === null) return false;\n        return day.toDateString() === this.rangeEnd.toDateString();\n    }\n\n    prevMonth() {\n        if (this.selectedMonth === null) return;\n\n        console.log(`Current Month: ${this.selectedMonth}, Year: ${this.selectedYear}`);\n        this.selectedMonth -= 1;\n        if (this.selectedMonth < 0) {\n            this.selectedMonth = 11;\n            this.selectedYear = this.selectedYear === null ? null : this.selectedYear - 1;\n        }\n        console.log(`Updated to Previous Month: ${this.selectedMonth}, Year: ${this.selectedYear}`);\n        this.days = this.calculateDays();\n    }\n\n    nextMonth() {\n        if (this.selectedMonth === null) return;\n\n        console.log(`Current Month: ${this.selectedMonth}, Year: ${this.selectedYear}`);\n        this.selectedMonth += 1;\n        if (this.selectedMonth > 11) {\n            this.selectedMonth = 0;\n            this.selectedYear = this.selectedYear === null ? null : this.selectedYear + 1;\n        }\n        console.log(`Updated to Next Month: ${this.selectedMonth}, Year: ${this.selectedYear}`);\n        this.days = this.calculateDays();\n    }\n\n    get firstDayOfMonth(): Date {\n        const date = new Date(this.today.getFullYear(), this.today.getMonth(), 1);\n        return date;\n    }\n\n    get lastDayOfMonth(): Date {\n        const date = new Date(this.today.getFullYear(), this.today.getMonth() + 1, 0);\n        return date;\n    }\n\n    toggleAdjacentMonths() {\n        this.showAdjacentMonths = !this.showAdjacentMonths;\n    }\n\n}\n\n\n\nexport const calendar = new Calendar();"
      }
    ]
  },
  {
    "name": "circular-text",
    "type": "folder",
    "contents": [
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n    import { BROWSER } from 'esm-env';\n    import { onMount } from 'svelte';\n\n    const text = \"x33025\";\n    let textRing: HTMLDivElement;\n\n    onMount(() => {\n        if (BROWSER) {\n            const chars = text.split('');\n            textRing.style.setProperty('--total', chars.length.toString());\n\n            // Set a fixed radius value\n            const fixedRadius = 4.2; // Example fixed radius value\n            textRing.style.setProperty('--radius', `${-fixedRadius}ch`);\n\n            const visibleSpan = document.createElement('span');\n            visibleSpan.setAttribute('aria-hidden', 'true');\n\n            let currentAngle = 352; // Start angle for the first character\n            const angleIncrement = 13; // Fixed angle increment for each character\n\n            chars.forEach((char, index) => {\n                const charSpan = document.createElement('span');\n                charSpan.textContent = char;\n                charSpan.style.setProperty('--index', index.toString());\n                charSpan.style.setProperty('--start-angle', `${currentAngle}deg`);\n                visibleSpan.appendChild(charSpan);\n\n                currentAngle += angleIncrement; // Increment the angle for the next character\n            });\n\n            const srSpan = document.createElement('span');\n            srSpan.classList.add('sr-only');\n            srSpan.textContent = text;\n\n            textRing.appendChild(visibleSpan);\n            textRing.appendChild(srSpan);\n        }\n    });\n</script>\n\n<div class=\"text-ring\" bind:this={textRing}>\n \n</div>\n\n\n<style>\n\n    .text-ring {\n        position: relative;\n      \n        width: 1em;  /* Fixed width */\n        height: 1em; /* Fixed height */\n        --font-size: 0.17em; /* Reduced from 1.5rem */\n        font-weight: bold; /* Set font weight to bold */\n    }\n\n    :global(.text-ring [style*=\"--index\"]) {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        font-size: var(--font-size);\n        transform:\n            translate(-50%, -50%)\n            rotate(var(--start-angle))\n            translateY(var(--radius));\n    }\n\n\n    :global(.sr-only) {\n        position: absolute;\n        width: 1px;\n        height: 1px;\n        padding: 0;\n        margin: -1px;\n        overflow: hidden;\n        clip: rect(0, 0, 0, 0);\n        white-space: nowrap;\n        border-width: 0;\n    }\n</style>\n"
      },
      {
        "name": "spinning-earth.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n    import { onMount } from 'svelte';\n  \n    let currentEarth = '🌎';\n    const earthEmojis = ['🌎', '🌍', '🌏'];\n    let index = 0;\n  \n    onMount(() => {\n      const interval = setInterval(() => {\n        index = (index + 1) % earthEmojis.length;\n        currentEarth = earthEmojis[index];\n      }, 500);\n  \n      return () => clearInterval(interval);\n    });\n  </script>\n  \n  <div class=\"earth-container\" aria-label=\"Cycling Earth Emojis\">\n    {currentEarth}\n  </div>\n  \n  <style>\n    .earth-container {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transform: translateY(7%) translateX(1%);\n    \n      font-size: 2.1em;\n      width: 1em;\n      height: 1em;\n        text-align: center;\n\n    }\n  </style>"
      }
    ]
  },
  {
    "name": "code-block",
    "type": "folder",
    "contents": [
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n    import { onMount } from 'svelte';\n    import Prism from 'prismjs';\n\n    import 'prism-svelte'; // Import Svelte syntax support\n    export let code: string;\n    export let language: string = 'javascript'; // Default language\n  \n    let codeElement: HTMLElement;\n  \n    onMount(() => {\n      if (codeElement) {\n        Prism.highlightElement(codeElement);\n      }\n    });\n  </script>\n  \n  <pre class=\"stack full-width language-{language}\" style=\"align-items: flex-start; justify-content: flex-start; \">\n    <code  bind:this={codeElement} class=\"language-{language}\">\n      {code}\n    </code>\n  </pre>\n  \n  <style>\n    pre {\n      padding: 1em;\n      background-color: var(--gray-1);\n      border-radius: 0.5em;\n      overflow-x: auto;\n      overflow-y: auto; /* Add this line to enable vertical scrolling */\n    }\n  \n    code {\n      font-family: 'Fira Code', monospace;\n      font-size: 0.9rem;\n    }\n  </style>\n  \n"
      }
    ]
  },
  {
    "name": "context-menu",
    "type": "folder",
    "contents": [
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n    import { contextMenuStore, closeContextMenu } from './store.js';\n    import { onMount } from 'svelte';\n  \n    let menu: HTMLDivElement | null = null;\n  \n  \n    // Handle clicks outside the menu to close it\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menu && !menu.contains(event.target as Node)) {\n        closeContextMenu();\n      }\n    };\n  \n    onMount(() => {\n      document.addEventListener('click', handleClickOutside);\n      return () => {\n        document.removeEventListener('click', handleClickOutside);\n      };\n    });\n  </script>\n  \n  {#if $contextMenuStore && $contextMenuStore.show}\n    <div bind:this={menu} class=\"stack context-menu\" style=\"top: {$contextMenuStore.y}px; left: {$contextMenuStore.x}px; --align: left;\">\n        {#each $contextMenuStore.options as option (option.label)}\n          <button class=\"context-menu-item\" on:click={() => { option.action(); closeContextMenu(); }}>{option.label}</button>\n        {/each}\n    </div>\n  {/if}\n  \n  <style>\n    .context-menu {\n      position: absolute;\n      background-color: white;\n      border: 1px solid #ccc;\n      z-index: 1000;\n      border-radius: 0.5em;\n      padding: 0.3em;\n    }\n  \n  .context-menu-item {\n\n\n    padding: 0.5em;\n    border-radius: 0.25em;\n\n  }\n\n  .context-menu-item:hover {\n    background-color: var(--gray-1);\n  }\n  </style>\n  "
      },
      {
        "name": "store.ts",
        "type": "file",
        "fileContent": "import { writable } from 'svelte/store';\n\nexport type ContextMenuOption = {\n  label: string;\n  action: () => void;\n};\n\nexport type ContextMenuState = {\n  show: boolean;\n  x: number;\n  y: number;\n  options: ContextMenuOption[];\n};\n\nexport const contextMenuVisible = writable(false);\nexport const contextMenuStore = writable<ContextMenuState | null>(null);\n\nexport function openContextMenu(x: number, y: number, options: ContextMenuOption[]) {\n  contextMenuStore.set({ show: true, x, y, options });\n  contextMenuVisible.set(true);\n}\n\nexport function closeContextMenu() {\n  contextMenuStore.set({ show: false, x: 0, y: 0, options: [] });\n  contextMenuVisible.set(false);\n}\n"
      }
    ]
  },
  {
    "name": "dropdown-menu",
    "type": "folder",
    "contents": [
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  import type { Snippet } from 'svelte';\n  import { openDropdownId, openDropdown, closeDropdown } from './store.js';\n  import { v4 as uuidv4 } from 'uuid';\n  import { fade } from 'svelte/transition';\n\n  interface Props {\n    button: Snippet;\n    content: Snippet;\n    alignment?: 'left' | 'right' | 'center';\n  }\n\n  let { button, content, alignment = 'right' }: Props = $props();\n  \n  let isOpen = $state(false);\n  let id: string = uuidv4();\n\n  let unsubscribe = openDropdownId.subscribe(value => {\n    isOpen = value === id;\n  });\n\n  function toggleMenu(event: MouseEvent) {\n    event.stopPropagation();\n    if (isOpen) {\n      closeDropdown();\n    } else {\n      openDropdown(id);\n      // No need to call positionMenu if not dynamically positioning\n    }\n  }\n\n  function handleClickOutside(event: MouseEvent) {\n    const target = event.target as Element | null;\n    if (target && !target.closest(`.menu-button-${id}`) && !target.closest(`.menu-content`)) {\n      closeDropdown();\n    }\n  }\n\n  $effect(() => {\n    if (typeof document !== 'undefined') {\n      if (isOpen) {\n        document.addEventListener('click', handleClickOutside, true);\n      } else {\n        document.removeEventListener('click', handleClickOutside, true);\n      }\n    }\n  });\n\n  onMount(() => {\n    if (typeof document !== 'undefined') {\n      return () => {\n        document.removeEventListener('click', handleClickOutside, true);\n        unsubscribe();\n      };\n    }\n    return unsubscribe;\n  });\n</script>\n\n<div class=\"dropdown-menu\"> \n  <button class={`menu-button-${id}`} onclick={toggleMenu}>\n      {@render button()}\n</button>\n\n{#if isOpen}\n    <div transition:fade={{ duration: 96 }} class=\"stack scrollable menu-content shadow-default glass\" style=\"--align: flex-start; --justify: flex-start; --gap: 0.25em; text-align: {alignment};\">\n        {@render content()}\n    </div>\n{/if}\n</div>\n\n<style>\n  .dropdown-menu {\n    position: relative;\n  }\n\n\n  .menu-content {\n    background-color: white;\n    border: 1px solid #ccc;\n    border-radius: 0.75em;\n\n    position: absolute; /* Position absolutely within the container */\n    z-index: 9999;\n    display: flex;\n    flex-direction: column;\n    padding: 0.25em;\n    margin-top: 0.35em;\n    max-height: 25em;\n    top: 100%; /* Position directly below the button */\n    right: auto;\n    transform: translateY(10px); /* Adjust for any additional spacing */\n    transform: translateX(-1em); /* Adjust for any additional spacing */\n  }\n\n  .menu-content[style*=\"text-align: right;\"] {\n    left: auto;\n    right: 0;\n  }\n\n  .menu-content[style*=\"text-align: center;\"] {\n    left: 50%;\n    transform: translateX(-50%) translateY(0.1em);\n  }\n</style>\n"
      },
      {
        "name": "store.ts",
        "type": "file",
        "fileContent": "\nimport { writable } from 'svelte/store';\n\nexport const openDropdownId = writable<string | null>(null);\n\nexport function closeDropdown() {\n  openDropdownId.set(null);\n}\n\nexport function openDropdown(id: string) {\n  openDropdownId.set(id);\n}"
      }
    ]
  },
  {
    "name": "file-explorer",
    "type": "folder",
    "contents": [
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n    import FileExplorer from \"./index.svelte\";\n    type StructureItem = {\n        type: 'folder' | 'file';\n        name: string;\n        contents?: StructureItem[];\n    };\n\n    // Use $props to receive props and a callback\n    let { structure, autoOpenAll = false, onFileSelect = () => {} } = $props();\n\n    let openFolders = $state(new Set<string>());\n\n    if (autoOpenAll) {\n        structure.forEach((item: StructureItem) => {\n            if (item.type === 'folder') {\n                openFolders.add(item.name);\n            }\n        });\n    }\n\n    let sortedStructure = $state<StructureItem[]>([]);\n\n    $effect(() => {\n        sortedStructure = structure.sort((a: StructureItem, b: StructureItem) => {\n            if (a.type === 'folder' && b.type === 'file') return -1;\n            if (a.type === 'file' && b.type === 'folder') return 1;\n            return 0;\n        });\n    });\n\n    function openFolder(folder: StructureItem) {\n        if (openFolders.has(folder.name)) {\n            openFolders.delete(folder.name);\n        } else {\n            openFolders.add(folder.name);\n        }\n        openFolders = new Set(openFolders);\n    }\n\n    // Function to handle file selection\n    function selectFile(file: StructureItem) {\n        onFileSelect(file);\n    }\n</script>\n\n<div class=\"stack file-explorer\" style=\"--direction: column; --gap: 0.5em\">\n    {#each sortedStructure as item}\n        {#if item.type === 'folder'}\n            <button class=\"folder\" onclick={() => openFolder(item)}>\n                {openFolders.has(item.name) ? '📂' : '📁'} {item.name}\n            </button>\n\n            {#if openFolders.has(item.name)}\n                <div class=\"contents\">\n                    <FileExplorer structure={item.contents} autoOpenAll={autoOpenAll} onFileSelect={onFileSelect} />\n                </div>\n            {/if}\n        {:else if item.type === 'file'}\n            <button class=\"file\" onclick={() => selectFile(item)}>📄 {item.name}</button>\n        {/if}\n    {/each}\n</div>\n\n<style>\n    .file-explorer {\n        \n    }\n    \n    .folder {\n        font-weight: bold;\n    }\n\n    .file {\n        cursor: pointer;\n    }\n\n    .contents {\n        padding-left: 1.5em;\n    }\n</style>"
      }
    ]
  },
  {
    "name": "image-component",
    "type": "folder",
    "contents": [
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n  export let image_url: string | null = null;\n  export let size: number = 10;  \n  export let object_fit: string = 'cover';\n  export let aspect_ratio: number | null = null; // Allow aspect_ratio to be null\n  export let alt_text: string = 'Image';\n  export let maskShape: 'circle' | 'square' = 'square'; \n  export let border_radius: number = 0.5;\n\n  // Removed restProps destructuring\n  let calculatedAspectRatio = 1;\n\n  const getCommonStyles = () => `\n    width: ${size}em;\n    ${aspect_ratio ? `height: calc(${size}em / ${aspect_ratio});` : ''}\n    border-radius: ${maskShape === 'circle' ? '50%' : `${border_radius}em`};\n  `;\n  \n  function handleImageLoad(event: Event) {\n    const img = event.target as HTMLImageElement;\n    if (!aspect_ratio) {\n      calculatedAspectRatio = img.naturalWidth / img.naturalHeight;\n      img.style.height = `calc(${size}em / ${calculatedAspectRatio})`;\n    }\n  }\n</script>\n\n<div class=\"stack\" style=\"--align: center; --justify: center;\">\n  {#if image_url}\n    <img \n      src={image_url} \n      alt={alt_text} \n      style=\"object-fit: {object_fit}; {getCommonStyles()}\" \n      on:load={handleImageLoad}\n     \n    />\n  {:else}\n    <div class=\"image-placeholder\" style=\"{getCommonStyles()}\">\n      <p>No Image</p>\n    </div>\n  {/if}\n</div>\n\n<style>\n  .image-placeholder {\n    background-color: var(--gray-1); /* You can adjust this color */\n  }\n\n  img {\n    display: block;\n  }\n</style>\n"
      }
    ]
  },
  {
    "name": "loader-text",
    "type": "folder",
    "contents": [
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n    export let words: string[] = []; // Array of words to be animated\n    export let loaderColor: string = 'black'; // Default loader color\n    export let loaderFont: number = 1; // Default loader font size\n    export let loadingText: string = 'loading'; // Default loading text\n    export let loaderTextColor: string = 'rgb(124, 124, 124)'; // Default loading text color\n    export let loaderTextBackground: string = 'transparent'; // Default loading text background\n</script>\n\n\n<style>\n    .loader {\n        color: var(--loader-color);\n        font-size: var(--loader-font)rem; /* Use rem for responsive font size */\n        box-sizing: content-box;\n    }\n\n    .words {\n        overflow: hidden;\n        position: relative;\n        height: 1.5em; /* Adjust based on font size */\n    }\n\n    .word {\n        display: block;\n        height: 100%;\n        padding-left: 0.5rem; /* Use rem for padding */\n        color: var(--loader-text-color);\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        text-align: center;\n        transform: translateY(100%); /* Start off-screen */\n        animation: spin_dynamic 4s infinite;\n    }\n\n    @keyframes spin_dynamic {\n        0%, 25% { transform: translateY(0); opacity: 1; }\n        30%, 45% { transform: translateY(-100%); opacity: 1; }\n        50%, 70% { transform: translateY(-200%); opacity: 1; }\n        75%, 100% { transform: translateY(0); opacity: 0; }\n    }\n\n    .words span:nth-child(1) {\n        animation-delay: 0s;\n    }\n\n    .words span:nth-child(2) {\n        animation-delay: 1s;\n    }\n\n    .words span:nth-child(3) {\n        animation-delay: 2s;\n    }\n</style>\n\n\n\n<div class=\"stack loader\" style=\"--loader-color: {loaderColor}; --loader-font: {loaderFont}; --loader-text-color: {loaderTextColor}; --loader-text-background: {loaderTextBackground}; --gap: 0.5em;\" aria-live=\"polite\">\n    <p>{loadingText}</p>\n    <div class=\"stack words\" style=\"--direction: column;\">\n        {#each words as word}\n            <span class=\"word\">{word}</span>\n        {/each}\n    </div>\n</div>\n\n"
      }
    ]
  },
  {
    "name": "log-tracker",
    "type": "folder",
    "contents": [
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n\nimport { logs } from \"./store.js\";\n    import { writable } from \"svelte/store\";\n\n    let isMinimized = $state(true);\n\n    $effect(() => {\n        logs.set([]);\n    });\n\n    function toggleMinimize() {\n        if (isMinimized && $logs.length > 0) {\n            isMinimized = false;\n        } else {\n            isMinimized = true;\n        }\n    }\n\n    function clearLogs() {\n        logs.set([]);\n        isMinimized = true;\n    }\n</script>\n\n\n<!-- Display log messages below -->\n<div class=\"stack {isMinimized ? '' : 'expand'} log-container\">\n\n    <div class=\"stack \" style=\"--direction: row; --align: center; \">\n        {#if !isMinimized}\n            <button style=\"padding-bottom: 0.16em;\" onclick={toggleMinimize}>\n                {\"x\"}\n            </button>\n            <div class=\"spacer\"></div>\n            <button class=\"callout\" style=\"--background: var(--gray-1);\" onclick={clearLogs}>Clear logs</button>\n        {/if}\n   \n\n        <button onclick={toggleMinimize}>\n            Logs { $logs.length }\n        </button>\n    \n    </div>\n\n    {#if !isMinimized}\n    <div class=\"stack scrollable\">\n        \n        {#each $logs as log}\n        \n            <p>{log}</p>\n        {/each}\n    </div>\n    {/if}\n</div>\n\n<style>\n    .log-container {\n        position: fixed;\n        bottom: 1em;\n        right: 1em;\n        max-width: calc(100% - 2em);\n        max-height: calc(100% - 2em);\n        overflow: auto;\n\n        padding: var(--default-padding);\n        background-color: #f9f9f9;\n        border: 1px solid #ddd;\n        border-radius: 0.5em;\n        z-index: 1000;\n    }\n\n    .log-container button {\n        background-color: transparent;\n        border: none;\n        cursor: pointer;\n        color: var(--blue);\n    }\n</style>\n"
      },
      {
        "name": "store.ts",
        "type": "file",
        "fileContent": "import { writable } from \"svelte/store\";\n\nexport const logs = writable<string[]>([]); // A store to keep log messages\n\nexport function addLog(message: string) {\n    // Adds the message to the logs and keeps the latest ones\n    logs.update(currentLogs => [...currentLogs, message]);\n}"
      }
    ]
  },
  {
    "name": "modal",
    "type": "folder",
    "contents": [
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n    import { modalVisible, modalContent, closeModal } from './store.js';\n    import { fade } from 'svelte/transition';\n    import type { Component } from 'svelte';\n  \n    // Replace reactive declarations with $derived\n    let visible = $derived($modalVisible);\n    let ModalComponent = $derived($modalContent?.content || null);\n\n    let modalProps = $derived($modalContent?.props || {});\n    let ModalHeader = $derived($modalContent?.header || null);\n    let ModalFooter = $derived($modalContent?.footer || null);\n  </script>\n  \n  {#if visible && ModalComponent}\n    <button\n      class=\"modal-backdrop\"\n      onclick={closeModal}\n      onkeydown={(e) => e.key === 'Escape' && closeModal()}\n      aria-label=\"Close modal\"\n      transition:fade={{ duration: 100 }}\n    ></button>\n  \n    <button \n      class=\"modal\" \n      onclick={(e) => e.stopPropagation()}\n      transition:fade={{ duration: 120 }}\n    >\n      <!-- Header -->\n      {#if ModalHeader}\n        <div class=\"stack full-width modal-header\" style=\"--direction: row;\">\n          {#if typeof ModalHeader === 'string'}\n            <p class=\"title\">{ModalHeader}</p>\n          {:else}\n            <ModalHeader />\n          {/if}\n          <div class=\"spacer\" ></div>\n          <div class=\"close-button\" role=\"button\" tabindex=\"0\" onclick={closeModal}>\n            Close\n          </div>\n        </div>\n      {/if}\n  \n      <!-- Content -->\n      <div class=\"modal-content\">\n        {#if ModalComponent}\n          <ModalComponent {...modalProps} />\n        {/if}\n      </div>\n  \n      <!-- Footer -->\n      {#if ModalFooter}\n        <div class=\"modal-footer\">\n          <ModalFooter />\n        </div>\n      {/if}\n    </button>\n  {/if}\n  \n  <style>\n    /* Styles remain the same */\n    .modal-backdrop {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-color: rgba(0, 0, 0, 0.6);\n      z-index: 500;\n      border: none;\n      padding: 0;\n    }\n    .modal {\n      position: fixed;\n      top: 10%;\n      left: 10%;\n      width: 80%;\n      height: 80%;\n      z-index: 700;\n      background-color: white;\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);\n      border-radius: 1em;\n      display: flex;\n      flex-direction: column;\n    }\n    .modal-header,\n    .modal-footer {\n      background-color: white;\n      z-index: 1;\n      padding: 1em;\n    }\n    .modal-header {\n      border-radius: 1em 1em 0 0;\n      position: sticky;\n      top: 0;\n    }\n    .modal-footer {\n      border-radius: 0 0 1em 1em;\n      position: sticky;\n      bottom: 0;\n      box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.1);\n    }\n    .modal-content {\n      flex: 1;\n      overflow-y: auto;\n      padding: 1em;\n    }\n    .close-button {\n      background: none;\n      border: none;\n      cursor: pointer;\n    }\n  </style>\n"
      },
      {
        "name": "store.ts",
        "type": "file",
        "fileContent": "import { writable } from 'svelte/store';\nimport type { Component } from 'svelte';\n\ninterface ModalContent {\n    content: Component;\n    props?: any;\n    header?: Component;\n    footer?: Component;\n}\nexport const modalVisible = writable(false);\nexport const modalContent = writable<ModalContent | null>(null);\n\nexport function openModal(\n    content: Component,\n    header?: Component,\n    props?: any,\n    footer?: Component\n) {\n    console.log(\"Opening modal with component:\", content.name, \"header:\", header, \"and props:\", props);\n    modalContent.set({ content, props, header, footer });\n    modalVisible.set(true);\n    console.log(\"Modal is now visible:\", true);\n}\n\n\nexport function closeModal() {\n    console.log(\"Closing modal\");\n    modalContent.set(null);\n    modalVisible.set(false);\n    console.log(\"Modal is now visible:\", false);\n}\n"
      }
    ]
  },
  {
    "name": "morph-text",
    "type": "folder",
    "contents": [
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n    import { onMount, onDestroy } from 'svelte';\n\n    let { texts, loop = false, delay = 1750, morphSpeed = 21 } = $props<{ \n        texts: string[], \n        loop?: boolean, \n        delay?: number, \n        morphSpeed?: number \n    }>();\n\n    let currentIndex = $state(0);\n    let displayedText = $state('');\n    let morphing = $state(false);\n    \n\n    $effect(() => {\n        displayedText = texts[currentIndex];\n        console.log(texts);\n\n        \n    });\n\n    onMount(() => {\n        interval = setInterval(() => {\n            if (!morphing) morphToNext();\n        }, delay);\n\n        return () => clearInterval(interval);\n    });\n    \n\n    let interval: NodeJS.Timeout;\n\n    const scrambleChars = \"#@*!&%$abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\n    function generateRandomScramble(length: number) {\n        return Array.from({ length }, () =>\n            scrambleChars[Math.floor(Math.random() * scrambleChars.length)]\n        ).join('');\n    }\n\n    async function morphToNext() {\n        if (texts.length <= 1) return;\n\n        morphing = true;\n\n        const nextIndex = (currentIndex + 1) % texts.length;\n        const currentText = texts[currentIndex];\n        const nextText = texts[nextIndex];\n        const longestLength = Math.max(currentText.length, nextText.length);\n\n        let tempText = currentText;\n\n        // Step 1: Mash current text into a scrambled state\n        for (let i = 0; i < longestLength; i++) {\n            tempText = tempText.split(\"\").map((char: string, index: number) => {\n                if (index < i) return scrambleChars[Math.floor(Math.random() * scrambleChars.length)];\n                return currentText[index] || scrambleChars[Math.floor(Math.random() * scrambleChars.length)];\n            }).join(\"\");\n\n            displayedText = tempText;\n            await new Promise((r) => setTimeout(r, morphSpeed));\n        }\n\n        // Step 2: Transition from scrambled state to next text\n        for (let i = 0; i < longestLength; i++) {\n            tempText = tempText.split(\"\").map((char: string, index: number) => {\n                if (index < i) return nextText[index] || \"\";\n                return scrambleChars[Math.floor(Math.random() * scrambleChars.length)];\n            }).join(\"\");\n\n            displayedText = tempText;\n            await new Promise((r) => setTimeout(r, morphSpeed));\n        }\n\n        // Finalize the next text\n        displayedText = nextText;\n        currentIndex = nextIndex;\n        morphing = false;\n\n        if (!loop && currentIndex === texts.length - 1) {\n            clearInterval(interval);\n        }\n    }\n\n    onDestroy(() => {\n        clearInterval(interval);\n    \n    });\n</script>\n\n<div class=\"morph-text\">{ displayedText }</div>\n\n<style>\n    .morph-text {\n        font-size: 0.9em;\n        font-weight: bold;\n    }\n</style>\n"
      }
    ]
  },
  {
    "name": "numeric-target",
    "type": "folder",
    "contents": [
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n\n\nlet { target = 5, current = $bindable(0) } = $props();\n    \n\n\n  \n  \n\n  \n    function handleInput(event: Event) {\n      const inputElement = event.target as HTMLInputElement;\n      const value = parseFloat(inputElement.value);\n      current = value;\n    }\n\n\n</script>\n\n<div class=\"stack\" style=\"--direction: row; --gap: 0.5em;\">\n  <p>{current}</p>\n  <p>/</p>\n  <input \n\n    class=\"{target === current ? 'bold' : ''}\"\n    type=\"number\" \n    value={target} \n    oninput={handleInput}\n   \n  />\n</div>\n\n\n"
      }
    ]
  },
  {
    "name": "scroll-to-top",
    "type": "folder",
    "contents": [
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n    import { onMount, afterUpdate, onDestroy } from 'svelte';\n    import { fade } from 'svelte/transition';\n  \n    let scrollContainer: HTMLElement | null = null;\n    let showScrollToTop = false;\n\n  \n    const scrollToTop = () => {\n      if (scrollContainer) {\n        scrollContainer.scrollTo({\n          top: 0,\n          behavior: 'smooth',\n        });\n      }\n    };\n  \n    function handleScroll() {\n      if (scrollContainer) {\n        showScrollToTop = scrollContainer.scrollTop > 200;\n      }\n    }\n  \n    function attachScrollListener() {\n      if (scrollContainer) {\n        scrollContainer.addEventListener('scroll', handleScroll);\n      }\n    }\n  \n    function detachScrollListener() {\n      if (scrollContainer) {\n        scrollContainer.removeEventListener('scroll', handleScroll);\n      }\n    }\n  \n    onMount(() => {\n      scrollContainer = document.querySelector('.scrollable');\n      attachScrollListener();\n    });\n  \n    afterUpdate(() => {\n      detachScrollListener();\n      scrollContainer = document.querySelector('.scrollable');\n      attachScrollListener();\n    });\n  \n    onDestroy(() => {\n      detachScrollListener();\n    });\n  </script>\n  \n  {#if showScrollToTop}\n    <button class=\"stack scroll-to-top regular-material\" on:click={scrollToTop} transition:fade={{ duration: 100 }}>\n      <slot>Scroll to top</slot>\n    </button>\n  {/if}\n  \n  <style>\n    .scroll-to-top {\n      position: fixed;\n      bottom: 3em;\n      right: 3em;\n      padding: 0.75em;\n      color: black;\n      cursor: pointer;\n      border-radius: 0.5em;\n      z-index: 1000;\n    }\n  </style>\n  "
      }
    ]
  },
  {
    "name": "sidebar",
    "type": "folder",
    "contents": [
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n    import { sidebarVisible, sidebarContent } from './store.js';\n    import { fly, fade } from 'svelte/transition';\n    import type { Component } from 'svelte';\n\n\n</script>\n\n{#if $sidebarVisible && $sidebarContent}\n    <button \n        class=\"sidebar-backdrop\" \n        on:click={() => sidebarVisible.set(false)} \n        on:keydown={(e) => e.key === 'Enter' && sidebarVisible.set(false)}\n        aria-label=\"Close sidebar\"\n        transition:fade={{ duration: 200 }}\n    >\n    </button>\n    <div \n        class=\"sidebar {$sidebarContent.orientation}\" \n        transition:fly={{ x: $sidebarContent.orientation === 'right' ? 300 : -300, duration: 300 }}\n    >\n        <svelte:component this={$sidebarContent.component} as Component />\n    </div>\n{/if}\n\n<style>\n    .sidebar-backdrop {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        z-index: 1000;\n        background-color: rgba(0, 0, 0, 0.5);\n        border: none;\n        cursor: pointer;\n    }\n\n    .sidebar {\n        position: fixed;\n        z-index: 1100;\n        background-color: white;\n        overflow-y: auto;\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n    }\n\n    .sidebar.right {\n        top: 0;\n        right: 0;\n        width: 25%;\n        height: 100%;\n    }\n\n    .sidebar.left {\n        top: 0;\n        left: 0;\n        width: 25%;\n        height: 100%;\n    }\n\n    .sidebar.top {\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 25%;\n    }\n\n    .sidebar.bottom {\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        height: 25%;\n    }\n</style>"
      },
      {
        "name": "store.ts",
        "type": "file",
        "fileContent": "import { writable } from 'svelte/store';\nimport type { Component } from 'svelte';\n\nexport enum SidebarOrientation {\n    Right = 'right',\n    Left = 'left'\n}\n\ninterface SidebarContent {\n    component: Component;\n    orientation: SidebarOrientation;\n}\n\nexport const sidebarVisible = writable(false);\nexport const sidebarContent = writable<SidebarContent | null>(null);\n\nexport function openSidebar(component: Component, orientation: SidebarOrientation = SidebarOrientation.Right) {\n    console.log(\"Opening sidebar with orientation:\", orientation);\n    sidebarContent.set({ component, orientation });\n    sidebarVisible.set(true);\n}\n\nexport function closeSidebar() {\n    sidebarVisible.set(false);\n    setTimeout(() => {\n        sidebarContent.set(null);\n    }, 300);\n}"
      }
    ]
  },
  {
    "name": "spinner",
    "type": "folder",
    "contents": [
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n    import { createEventDispatcher } from 'svelte';\n  \n    export let promise: Promise<any> | null = null;\n    export let loadingText: string = 'Loading...'; // Customizable loading text\n    export let errorText: string = 'An error occurred'; // Customizable error text\n  \n    let status = 'idle';\n    let result: any = null;\n    let error: any = null;\n  \n    const dispatch = createEventDispatcher();\n  \n    $: if (promise) {\n      status = 'loading';\n      promise\n        .then(res => {\n          result = res;\n          status = 'success';\n          dispatch('success', { result });\n        })\n        .catch(err => {\n          error = err;\n          status = 'error';\n          dispatch('error', { error });\n        });\n    }\n  </script>\n  \n  {#if status === 'loading'}\n    <div class=\"spinner\">{loadingText}</div>\n  {:else if status === 'error'}\n    <div class=\"error\">{errorText}: {error.message}</div>\n  {/if}\n  \n  <style>\n    .spinner {\n      /* Add your spinner styles here */\n      padding: 0.5em;\n      text-align: center;\n    }\n    .error {\n      padding: 0.5em;\n      background-color: var(--red);\n      border-radius: 0.25em;\n      text-align: center;\n      color: white;\n    }\n  </style>\n  "
      }
    ]
  },
  {
    "name": "text-editor",
    "type": "folder",
    "contents": [
      {
        "name": "editor.svelte.ts",
        "type": "file",
        "fileContent": "import { SmartStyle, TextFormatter, LinkHandler, MediaHandler, TextSanitizer } from './modules/index.js';\n\nexport class Editor {\n    public smartStyleState = $state(true);\n    public smartStyle: SmartStyle;\n    public textFormatter: TextFormatter;\n    public linkHandler: LinkHandler;\n    public mediaHandler: MediaHandler;\n    public textSanitizer: TextSanitizer;\n\n    \n    constructor() {\n        this.smartStyle = new SmartStyle();\n        this.textFormatter = new TextFormatter(this.smartStyle);\n        this.linkHandler = new LinkHandler(this.smartStyle);\n        this.mediaHandler = new MediaHandler();\n        this.textSanitizer = new TextSanitizer();\n    }\n\n    toggleSmartStyle() {\n        this.smartStyle.toggleSmartStyle();\n        this.smartStyleState = this.smartStyle.isSmartStyleEnabled;\n    }\n\n\n}\n\n\nexport const editor = new Editor();\n"
      },
      {
        "name": "index.svelte",
        "type": "file",
        "fileContent": "<script lang=\"ts\">\n  import { editor } from './editor.svelte.js';\n  import { onMount } from 'svelte';\n  import Toolbar from './toolbar/index.svelte';\n  // Props\n  let { content = $bindable(''), placeholder = '', styles = '' } = $props<{\n    content: string;\n    placeholder?: string;\n    styles?: string;\n  }>();\n\n\n  onMount(() => {\n    console.log('TEXT EDITOR CONTENT', content);\n    if (editableContent) {\n      editableContent.innerHTML = content;\n    }\n  });\n\n\n  let editableContent: HTMLElement;\n\n  // Handle text input\n  const handleInput = () => {\n    content = editor.textSanitizer.sanitize(editableContent.innerHTML.trim());\n  };\n\n  // Handle keyboard shortcuts\n  function handleKeydown(event: KeyboardEvent) {\n    if (event.metaKey || event.ctrlKey) {\n      switch (event.key.toLowerCase()) {\n        case 'h':\n          if (event.shiftKey) {\n            event.preventDefault();\n            if (editor.textFormatter.isList()) {\n              editor.textFormatter.removeList();\n            } else {\n              editor.textFormatter.cycleHeading();\n            }\n          }\n          break;\n        case 'b':\n          event.preventDefault();\n          editor.textFormatter.toggleBold();\n          break;\n        case 'i':\n          event.preventDefault();\n          editor.textFormatter.toggleItalic();\n          break;\n        case 'u':\n          event.preventDefault();\n          editor.textFormatter.toggleUnderline();\n          break;\n        case 't':\n          event.preventDefault();\n          editor.mediaHandler.insertTable(3, 3); // Example: Insert a 3x3 table\n          break;\n        case 'o':\n          event.preventDefault();\n          editor.textFormatter.toggleOrderedList();\n          break;\n        case 'l':\n          event.preventDefault();\n          editor.textFormatter.toggleUnorderedList();\n          break;\n      }\n    } else if (event.altKey) {\n      switch (event.key) {\n        case 'ArrowLeft':\n          event.preventDefault();\n          editor.textFormatter.toggleAlignLeft();\n          break;\n        case 'ArrowDown':\n          event.preventDefault();\n          editor.textFormatter.toggleAlignCenter();\n          break;\n        case 'ArrowRight':\n          event.preventDefault();\n          editor.textFormatter.toggleAlignRight();\n          break;\n        case 'ArrowUp':\n          event.preventDefault();\n          editor.textFormatter.toggleAlignJustify();\n          break;\n      }\n    }\n  }\n\n\n</script>\n\n<div class=\"stack text-editor expand\">\n  <Toolbar />\n  <div class=\"divider\"></div>\n  <div\n    bind:this={editableContent}\n    class=\"editable-content expand\"\n    style={styles}\n    contenteditable=\"true\"\n    oninput={handleInput}\n    onkeydown={handleKeydown}\n    tabindex=\"0\"\n    data-placeholder={placeholder}\n    role=\"textbox\"\n  >\n  </div>\n</div>\n\n<style>\n  .text-editor {\n    background-color: white;\n    border: 1px solid var(--gray-2);\n    border-radius: 0.5em;\n    padding: 1em;\n  }\n\n\n  \n\n  .editable-content {\n    outline: none;\n    font-family: 'Noto Serif', serif;\n    line-height: 1.6em;\n    position: relative;\n  }\n\n  .editable-content:empty:before {\n    content: attr(data-placeholder);\n    color: var(--gray-3);\n    position: absolute;\n    top: 1em;\n    left: 1em;\n    pointer-events: none;\n    opacity: 0.6;\n  }\n\n\n\n\n\n</style>\n"
      },
      {
        "name": "modules",
        "type": "folder",
        "contents": [
          {
            "name": "index.ts",
            "type": "file",
            "fileContent": "export { TextFormatter } from \"./text-formatter.js\";\nexport { SmartStyle } from \"./smart-style.svelte.js\";\nexport { MediaHandler } from \"./media-handler.js\";\nexport { LinkHandler } from \"./link-handler.js\";\nexport { TextSanitizer } from \"./text-sanitizer.js\";"
          },
          {
            "name": "link-handler.ts",
            "type": "file",
            "fileContent": "import { SmartStyle } from './smart-style.svelte.js';\n\nexport class LinkHandler {\n    \n    private smartStyle: SmartStyle;\n\n    constructor(smartStyle: SmartStyle) {\n        this.smartStyle = smartStyle;\n    }\n\n    attachLink() {\n        const url = prompt('Enter the URL:');\n        const selection = window.getSelection();\n\n        if (url && selection && selection.rangeCount > 0) {\n            const range = selection.getRangeAt(0);\n            if (this.smartStyle.isSmartStyleEnabled) {\n                this.smartStyle.expandSelectionToWordBoundary(range);\n            }\n\n            if (range.toString().length === 0) {\n                alert('Please select some text to attach the link.');\n                return;\n            }\n\n            const link = document.createElement('a');\n            link.href = url;\n            link.target = '_blank';\n            link.textContent = range.toString();\n\n            range.deleteContents();\n            range.insertNode(link);\n\n            const newRange = document.createRange();\n            newRange.setStartAfter(link);\n            newRange.setEndAfter(link);\n            selection.removeAllRanges();\n            selection.addRange(newRange);\n        } else {\n            alert('No text selected to attach the link.');\n        }\n    }\n\n    handlePaste(event: ClipboardEvent) {\n        const clipboardData = event.clipboardData?.getData('text');\n        const urlPattern = /(https?:\\/\\/[^\\s]+)/g;\n\n        if (clipboardData && urlPattern.test(clipboardData)) {\n            event.preventDefault();\n            const selection = window.getSelection();\n            if (selection && selection.rangeCount > 0) {\n                const range = selection.getRangeAt(0);\n                if (this.smartStyle.isSmartStyleEnabled) {\n                    this.smartStyle.expandSelectionToWordBoundary(range);\n                }\n\n                if (range.toString().length > 0) {\n                    const link = document.createElement('a');\n                    link.href = clipboardData;\n                    link.target = '_blank';\n                    link.textContent = range.toString();\n\n                    range.deleteContents();\n                    range.insertNode(link);\n\n                    const newRange = document.createRange();\n                    newRange.setStartAfter(link);\n                    newRange.setEndAfter(link);\n                    selection.removeAllRanges();\n                    selection.addRange(newRange);\n                } else {\n                    document.execCommand('insertText', false, clipboardData);\n                }\n            }\n        }\n    }\n}\n"
          },
          {
            "name": "media-handler.ts",
            "type": "file",
            "fileContent": "// media-handler.ts\nexport class MediaHandler {\n    insertTable(rows: number, columns: number) {\n        const table = document.createElement('table');\n        for (let i = 0; i < rows; i++) {\n            const row = table.insertRow();\n            for (let j = 0; j < columns; j++) {\n                const cell = row.insertCell();\n                cell.innerHTML = '&nbsp;'; // Add a space or placeholder\n            }\n        }\n        this.insertElement(table);\n    }\n\n    insertImage(src: string, alt: string = '') {\n        const img = document.createElement('img');\n        img.src = src;\n        img.alt = alt;\n        this.insertElement(img);\n    }\n\n    private insertElement(element: HTMLElement) {\n        const selection = window.getSelection();\n        if (selection && selection.rangeCount > 0) {\n            const range = selection.getRangeAt(0);\n            range.deleteContents();\n            range.insertNode(element);\n        }\n    }\n}\n"
          },
          {
            "name": "smart-style.svelte.ts",
            "type": "file",
            "fileContent": "export class SmartStyle {\n    \n    public smartStyleEnabled = $state(true);\n\n    get isSmartStyleEnabled(): boolean {\n        return this.smartStyleEnabled;\n    }\n\n    toggleSmartStyle() {\n        this.smartStyleEnabled = !this.smartStyleEnabled;\n    }\n\n    // Expand the current text selection to the word boundaries when smart style is enabled\n    expandSelectionToWordBoundary(range: Range) {\n        const startContainer = range.startContainer;\n        const endContainer = range.endContainer;\n\n        const expandBoundary = (container: Node, offset: number, isStart: boolean) => {\n            const text = container.textContent || '';\n            let newOffset = offset;\n\n            if (isStart) {\n                // Move backward to the start of the word\n                while (newOffset > 0 && /\\w/.test(text[newOffset - 1])) {\n                    newOffset--;\n                }\n            } else {\n                // Move forward to the end of the word\n                while (newOffset < text.length && /\\w/.test(text[newOffset])) {\n                    newOffset++;\n                }\n            }\n            return newOffset;\n        };\n\n        // Expand the range to word boundaries\n        const newStartOffset = expandBoundary(startContainer, range.startOffset, true);\n        range.setStart(startContainer, newStartOffset);\n\n        const newEndOffset = expandBoundary(endContainer, range.endOffset, false);\n        range.setEnd(endContainer, newEndOffset);\n    }\n}\n"
          },
          {
            "name": "text-formatter.ts",
            "type": "file",
            "fileContent": "import { SmartStyle } from './smart-style.svelte.js';\n\nexport class TextFormatter {\n\n    private smartStyle: SmartStyle;\n\n    constructor(smartStyle: SmartStyle) {\n        this.smartStyle = smartStyle;\n    }\n\n    private toggleStyle(command: string, value: string = '') {\n        const selection = window.getSelection();\n        if (selection && selection.rangeCount > 0) {\n            const range = selection.getRangeAt(0);\n            if (this.smartStyle.isSmartStyleEnabled) {\n                this.smartStyle.expandSelectionToWordBoundary(range);\n            }\n            document.execCommand(command, false, value);\n        }\n    }\n\n    toggleBold() {\n        this.toggleStyle('bold');\n    }\n\n    toggleItalic() {\n        this.toggleStyle('italic');\n    }\n\n    toggleUnderline() {\n        this.toggleStyle('underline');\n    }\n\n    toggleHeading(level: number) {\n        this.toggleStyle('formatBlock', `H${level}`);\n    }\n\n    toggleH2() {\n        this.toggleHeading(2);\n    }\n\n    toggleH3() {\n        this.toggleHeading(3);\n    }\n\n    toggleH4() {\n        this.toggleHeading(4);\n    }\n\n    cycleHeading() {\n        const selection = window.getSelection();\n        if (selection && selection.rangeCount > 0) {\n            const range = selection.getRangeAt(0);\n            const parentElement = this.findClosestBlockParent(range.commonAncestorContainer);\n    \n            const headingLevels = ['H1', 'H2', 'H3', 'H4'];\n            let nextHeadingIndex = 0; // Default to H1 if no heading is found\n    \n            if (parentElement) {\n                const currentTag = parentElement.tagName.toUpperCase();\n                const currentIndex = headingLevels.indexOf(currentTag);\n    \n                // Determine the next heading level\n                nextHeadingIndex = (currentIndex + 1) % headingLevels.length;\n            }\n    \n            this.toggleHeading(nextHeadingIndex + 1); // +1 to match H1, H2, etc.\n        }\n    }\n    \n    private findClosestBlockParent(node: Node): HTMLElement | null {\n        let currentNode: Node | null = node;\n        while (currentNode && currentNode.nodeType === Node.TEXT_NODE) {\n            currentNode = currentNode.parentNode;\n        }\n    \n        while (currentNode && (!(currentNode instanceof HTMLElement) || \n               !['H1', 'H2', 'H3', 'H4', 'P', 'DIV'].includes(currentNode.tagName.toUpperCase()))) {\n            currentNode = currentNode.parentNode;\n        }\n    \n        return currentNode as HTMLElement | null;\n    }\n\n    toggleAlignLeft() {\n        this.toggleStyle('justifyLeft');\n    }\n\n    toggleAlignCenter() {\n        this.toggleStyle('justifyCenter');\n    }\n\n    toggleAlignRight() {\n        this.toggleStyle('justifyRight');\n    }\n\n    toggleAlignJustify() {\n        this.toggleStyle('justifyFull');\n    }\n\n    toggleOrderedList() {\n        this.toggleStyle('insertOrderedList');\n    }\n\n    toggleUnorderedList() {\n        this.toggleStyle('insertUnorderedList');\n    }\n\n    isList(): boolean {\n        const selection = window.getSelection();\n        if (selection && selection.rangeCount > 0) {\n            const range = selection.getRangeAt(0);\n            const parentElement = this.findClosestBlockParent(range.commonAncestorContainer);\n            return !!parentElement && ['UL', 'OL'].includes(parentElement.tagName.toUpperCase());\n        }\n        return false;\n    }\n\n    removeList() {\n        if (this.isList()) {\n            this.toggleStyle('insertUnorderedList'); // Toggle off unordered list\n            this.toggleStyle('insertOrderedList');   // Toggle off ordered list\n        }\n    }\n\n}\n"
          },
          {
            "name": "text-sanitizer.ts",
            "type": "file",
            "fileContent": "// modules/text-sanitizer.ts\nimport DOMPurify from 'dompurify';\n\nexport class TextSanitizer {\n  private sanitizer: DOMPurify.DOMPurifyI;\n\n  constructor() {\n    this.sanitizer = DOMPurify as unknown as DOMPurify.DOMPurifyI;\n  }\n\n  sanitize(html: string): string {\n    const sanitizedHtml = this.sanitizer.sanitize(html, {\n      ALLOWED_TAGS: ['b', 'i', 'u', 'a', 'p', 'br', 'ul', 'ol', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'strong', 'em'],\n      ALLOWED_ATTR: ['href', 'title', 'target', 'rel'],\n    });\n\n    return sanitizedHtml.replace(/<(\\w+)(?:\\s+[^>]*)?>\\s*<\\/\\1>/g, '');\n  }\n}\n"
          }
        ]
      },
      {
        "name": "toolbar",
        "type": "folder",
        "contents": [
          {
            "name": "index.svelte",
            "type": "file",
            "fileContent": "<script lang=\"ts\">\n    import DropdownMenu from \"$lib/components/dropdown-menu/index.svelte\";\n    import { closeDropdown } from \"$lib/index.js\";\n    import Stack from \"$lib/layout/stack.svelte\";\n\n    function handleUlist() {\n        console.log('ulist');\n    }\n\n    function handleOlist() {\n        console.log('olist');\n    }\n\n    function handleBold() {\n        console.log('bold');\n    }\n\n    function handleItalic() {\n        console.log('italic');\n    }\n\n    function handleUnderline() {\n        console.log('underline');\n    }\n</script>\n\n<Stack horizontal style=\"--gap: 0.5em;\">\n    {@render ToolbarButton('Bold', handleBold)}\n    {@render ToolbarButton('Italic', handleItalic)}\n    {@render ToolbarButton('Underline', handleUnderline)}\n    {@render ToolbarButton('Ulist', handleUlist)}\n    {@render ToolbarButton('Olist', handleOlist)}\n    <DropdownMenu alignment=\"center\">\n        {#snippet button()}\n            <p class=\"caption bold toolbar-button\">Justify</p>\n        {/snippet}\n\n        {#snippet content()}\n\n\n            <div class=\"stack\" >\n                <button class=\"caption bold dropdown-item\" onclick={() => {console.log('left'); closeDropdown() }}>Left</button>\n                <button class=\"caption bold dropdown-item\" onclick={() => {console.log('center'); closeDropdown()}}>Center</button>\n                <button class=\"caption bold dropdown-item\" onclick={() => {console.log('right'); closeDropdown()}}>Right</button>\n                <button class=\"caption bold dropdown-item\" onclick={() => {console.log('full'); closeDropdown()}}>Full</button>\n        </div>\n  \n        {/snippet}\n    </DropdownMenu>\n</Stack>\n\n{#snippet ToolbarButton(label: string, onclick: () => void)}\n    <button class=\"caption bold toolbar-button\" onclick={onclick}>{label}</button>\n{/snippet}  \n\n\n<style>\n\n \n\n    .toolbar-button {\n        border: 1px solid var(--gray-2);\n        border-radius: 0.5em;\n        padding: 0.5em;\n    }\n</style>"
          }
        ]
      }
    ]
  }
]